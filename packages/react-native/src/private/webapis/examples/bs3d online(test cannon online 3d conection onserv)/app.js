var express = require('express');
var bodyParser = require('body-parser');
var app = express();
var serv = require('http').Server(app);
var maler = require('./nodemailer');
var CANNON = require('cannon');

var mongojs = require("mongojs");
var db = mongojs('localhost:27017/road', ['login','property','forum']);

var io = require('socket.io')(serv,{});

var socketlist = {};
var playerlist = {};
var initpack = {
player:[],

};
var deletepack = {
player:[],

};

app.get('/',function(req, res) {
	res.sendFile(__dirname + '/client/index.html');
});
//app.use('/css', express.static(__dirname + '/client/stle'))
app.use('/client',express.static(__dirname + '/client'));
app.use(bodyParser.urlencoded({ extended: false }))
/*
app.get('/registration',(req, res)=>{
res.sendFile(__dirname+ '/client/registration.html')//if(typeof user !== 'object') //return res.sendFile(__dirname+ '/registration.html')
//res.send('отправлено на почту'+user.mail)
//res.send('asd')
//user = undefined 
})
*/
app.post('/reg',(req, res)=>{
if(!req.body.nickname || !req.body.mail || !req.body.pass1 || !req.body.pass2) return res.sendStatus(400)
var generate = req.body.nickname + '' + Math.round(Math.random()*1000000)
db.login.findOne({account:req.body.mail},function(err,res2){
if(res2){
res.send('mailexists Этот почтовый ящик уже используется, если это ваш почтовый ящик, вы можете найти письмо от нас, и войти в свой аккаунт, с помощью данных из письма. ')
}else{
db.login.findOne({name:req.body.nickname},function(err,res3){
if(res3){
res.send('nametaken Этот ник уже занят.')
}else{
db.login.insert({account:req.body.mail,pass:req.body.pass1,name:req.body.nickname,finreg:generate});


var message ={
//from: 'Mailer Test <axel.ledner83@ethereal.email>',//req.body.pass1
to: req.body.mail,
subject:'test',
html: '<div style="background-image: url(https://thumb.cloud.mail.ru/weblink/thumb/xw1/BHCa/qePPkUe48) ; color: #fcdf4c;"><img style="display: block; margin-left: auto; margin-right: auto" src="https://thumb.cloud.mail.ru/weblink/thumb/xw1/jieB/rPpopWifn" alt="logo"><br><h2 style="margin-left:20px; margin-right:20px;">Поздравляем, '+req.body.nickname+', Остался один шаг, до завершения регистрации в Rage of Apocalipsistic Desert!</h2><br><h4 style="margin-left:20px;">Для того, чтобы завершить регистрацию, пройдите по этой ссылке <a style="color: #e3b335" href="http://192.168.0.3:2000/finreg/'+generate+'">http://192.168.0.3:2000/finreg/'+generate+'</a></h4><br><i style="margin-left:20px;">данные вашей учётной записи</i><br><ul><br><li>login: '+req.body.mail+' </li><br><li>password: '+req.body.pass1+'</li><br><ul><br><p>Данное письмо не требует ответа.</p><br><br></div>'
}
maler(message)
console.log(req.body)
res.redirect('../#regmail')
}
})
}
})

})
app.get('/finreg/:generate', (req, res) => {

db.login.findOne({finreg:req.params.generate},function(err,res2){//интересное наблюдение: такой оператор (find) ищет совпадение сразу по двум параметрам, в данном случае по account и pass. я бы мог конечно отдельно найти каждый параметр, записать их в переменные, но я не до конца понимаю, как в таком случае, учитывая задержку отклика монгодб, можно будет совместить их вместе... да и в принципе непонимаю, что будет если 2 и более пользователя авторизуются одновременно, могут ли они теоретически поменяться аккаунтами при входе?. findOne находит только первый попавшийся, нот так как в коде непредусмотрено существования 2х одинакого названных аккаунтов, то для оптимизации поиска мы ищем только до того момента, пока не найдем первый попавшийся, дальше не ищем.

if(res2){
db.login.update({finreg:req.params.generate},{$set:{finreg:'no'}})
res.redirect('../#regsuccess')
}else{
res.send('Кажется что то пошло не так! Не удалось найти ваш аккаунт в базе данных, возможно была допущена опечатка в ссылке, или же аккаунт ещё не создан или уже подтверждён')

}
})
})

serv.listen(2011);



//var users = {
//"asd":"awer"
// }
loginfunc = function(mailpass,cb){
//var finreg = '123'
db.login.findOne({account:mailpass.mail,pass:mailpass.password},function(err,res){//интересное наблюдение: такой оператор (find) ищет совпадение сразу по двум параметрам, в данном случае по account и pass. я бы мог конечно отдельно найти каждый параметр, записать их в переменные, но я не до конца понимаю, как в таком случае, учитывая задержку отклика монгодб, можно будет совместить их вместе... да и в принципе непонимаю, что будет если 2 и более пользователя авторизуются одновременно, могут ли они теоретически поменяться аккаунтами при входе?. findOne находит только первый попавшийся, нот так как в коде непредусмотрено существования 2х одинакого названных аккаунтов, то для оптимизации поиска мы ищем только до того момента, пока не найдем первый попавшийся, дальше не ищем.
//console.log(res);
if(res){
console.log(res);
if(res.finreg === 'no'){
cb(res.name)//а тут смешная ситуация, тут должно было быть res[0].name, то так как я использую не find а findOne, то написано так
}else{
cb(false)
}
}else{
cb(false)

}
})

};

var minusfive = function(zx){
//db.login.remove({account:"somp"})
//db.property.remove({account:"somp"})
//db.forum.remove({account:"somp"})
//db.login.insert({account:"aa",pass:"aa",name:"aa",finreg:'no'});
//db.property.insert({account:"somp",xp:"1234"});
//db.forum.insert({account:"somp",msg:"hl"});
//db.login.update({account:"somp"},{$set:{exp:120,fraction:"gidra"}})
//db.property.update({account:"somp"},{$set:{item:['asdf','dfds']}})
db.login.find(function(err,res){//db.property.find({account:'ХагиВаги'},{pass:1},function(err,res){//db.progress.find(function(err,res){

console.log(res)


});
db.property.find(function(err,res){//db.progress.find({username:'ХагиВаги'},{password:1},function(err,res){//db.progress.find(function(err,res){

console.log(res)


});
db.forum.find(function(err,res){//db.progress.find({username:'ХагиВаги'},{password:1},function(err,res){//db.progress.find(function(err,res){

console.log(res)


});


}

var popadanie = function(self,somp){//функция проверяющяя столкновения
		return Math.sqrt(Math.pow(self.x-somp.x,2) + Math.pow(self.y-somp.y,2));
}

//теперь понгятно зачем выносить создание игрока в функцию, все для того чтобы под этой функцией инициалезировать пустой обект плейер.лист, то есть плеер, это как бы и переменная и функция, а вот плеер.лист, это лист находящийся в обекте. Выглядит всё равно максимально бредово, складывается впечалление, что в месте с запросом функции плеер, мы каждый раз создаем лист, походу это О.О.П. дабы незаслонять все глобальными переменными.

io.sockets.on('connection', function(socket){
console.log(socket.id);
var self = {}
socket.on('login', function(logpass){//logpass.password зашифрован пароль, logpass.mail зашифрована почта

loginfunc(logpass,function(cbcorrect){

if(cbcorrect != false){
console.log(cbcorrect);// cbcorrect зашифрован никнейм
socket.emit('signin',{status:true,login:cbcorrect});

socket._2name = cbcorrect
//socket._2pass = logpass.password
socket.id = cbcorrect
socketlist[socket.id] = socket
//var player = Player();//это одно из сложных понятий. Сначала мы обращаемся к функции Player() с параметрами, а затем присваеваем переменной player эту функцию Player(), для того чтобы ниже в коде, обрасчатся к подфункцие player.takeoff, которая ведёт к self.takeoff внутри функции Player().
//для чего нужно было вообще вызывать функцию ?

}else{
socket.emit('signin',{status:false,login:'error'});
console.log('netu');
}
})

})

socket.on('playbutton', function(somp){
//var logpass = {}
//logpass.mail = socket._2mail
//logpass.password = socket._2pass
//var name = socket.id
//loginfunc(logpass,function(cbbcorrect){
if(true){//if(socket._2name){
if(somp.status === true){
	console.log(socket.id)
socket.id='aq'
self.x1 = 0;
self.y1 = 0;
self.speed = 0;
self.angle = 0;
self.name = socket.id;

self.body_hp = 100;
self.mass_body = 80;
self.body = '1968_firebird';
if(self.body === '1968_firebird'){
self.body_hp = 1000;
self.mass_body = 1400;//kg
}
self.engine_nj = 0;
self.mass_engine = 0
self.thismatic = 1;
self.maxspeed_engine = 0;
self.engine = 'WLA_42';//23,5 л.с в 70 nj//на картере, сквозь ржавчину и царапины, можно разгледеть выграверованную надпись "Harley-Davidson"
if(self.engine === 'WLA_42'){
self.engine_nj = 55.5;//ньютон джоуль, навозные жуки, Ньютон-метр
self.mass_engine = 50;
self.maxspeed_engine = 25;//конкретно для 45 nj максималка около 25. максималка влияет только на максимальную скорость, и скорость одной передачи, если мощьности двигателя нехватает или общеая масса авто слишком высокая или и то и то, то авто ненаберёт максималку lol
}

self.matic = 1;
self.matic_nj = 0;
self.maxspeed_matic = 0;
self.mass_boxmatic = 0;
self.boxmatic = 'WLA_42'
if(self.boxmatic === 'WLA_42'){
self.matic = 3 - 1;//пердачи
self.matic_nj = 5//думаю, в конечном итоге, не стоит коробке прибавлять мощьность двигателя, можно обойтись увеличением максималки, хотя с другой стороны коробка по идее облегчает набор скорости машины...
self.maxspeed_matic = 2
self.mass_boxmatic = 30;
}
self.breaking = 100;
self.mass_breakers = 0;
self.breakers = 'podosva';
if(self.breakers === 'podosva'){
self.breaking = 0.5;
self.mass_breakers = 5;
}
self.wheels_hp = 0;
self.cross_coefficent = 0;
self.anglewheel = 0;
self.maxspeed_wheel = 1000;
self.mass_wheels = 0;
self.wheels = 'old_tires'//старые автомобильные колёса, со стертым протектором, 
if(self.wheels === 'old_tires'){
self.wheels_hp = 20;
self.mass_wheels = 20;
self.maxspeed_wheel = 45;//Максималка для колёс считается отдельно, в случае колёс устанавливается наибольее меньшая максимальная скорость, если колёса тормозят машину, то максималка колёс, если двигатель недостаточно мощьный, то максималка двигателя.
self.cross_coefficent = 100;//влияет на проходимость по бездорожью
self.anglewheel = 0;//здесь нужно ставить не угл поворота, а коефицент разгона, после которого увеличевается манёвренность машины
}
//scrap_tires//Колёса, шины которых набитые старыми камерами, такие колёса невозможно проколоть, так как они не заполнены воздухом. Форму таких колёс держут старые камеры и разная резина, набитае внуть покрышки через боковые дыры, в связи с этим, на таких колёсах, неполучится достичь хорошой скорости, с другой стороны, при отсутствии альтернатив, всё же лучше, чем ездить на ободах. По видимому такие колёса, были разработаны инженерами реднеков "максимум усилий - минимум результата", 
//airless_tires// Безвоздушные шины. Сочетание хорошей прочности, и средней скорости. Однако такие шины практически невозможно найти или где то купить. Гте ты их взял ?, 
//dual_tires//Двойные колёса. Такие устанавливаются на грузовики. Такие колёса хорошо распределяют вес машины, что даёт хорошую проходимость. Также у таких колёс повышенная прочнось, Однако хорошо разогнатся на таких колёсах неполучится, скорость - выше среднего., 
//big_tires// Колёса, по видимому снятые с бигфута. У таких колёс самый хороший коефицент проходимости - проедет по любой грязи, да что уш там грязь, на таких колёсах даже в глубоких водоёмах плавать можно. Однако прочнось близкая к нулю. Одно попадание по колесу, и ваш баркас идёт ко дн... тонет в общем, 
//caterpillar_track// Многие спросят зачем ? Зачем ставить танковую подвеску под машину. А я вам отвечу зачем. Гусеницы это неубиваемые колёса, скорее развалится ваше авто, чем гусеницы. Проходимость хорошая, лучше только у бигфутов. Конечно скорость 35 км/ч, но зачем нужна скорость, если ты танк, ну почти танк.

//вычесление константы из констант
self.mass = self.mass_body + self.mass_engine + self.mass_wheels + self.mass_boxmatic + self.mass_breakers;
self.maxspeed = self.maxspeed_engine + self.maxspeed_matic//так же как и с мощьностью двигателя, максималка тоже прибавляется. Максималка для колёс считается отдельно, в случае колёс устанавливается наибольее меньшая максимальная скорость, если колёса тормозят машину, то максималка колёс, если двигатель недостаточно мощьный, то максималка двигателя.
self.nj = self.engine_nj + self.matic_nj// складываем значения мощьности двигателя, к мощьности коробки, и получаем итоговое значение.
self.onematic = self.maxspeed / self.matic//так делать неправильно, нужно расчитывать скорость одной передачи из мощьности двигателя и суммарной массы, но кто я такой чтобы себя судить ?)
self.prethismatic = 0;
self.timermatic = 0;
self.proverkanastolknovenie = 0;

self.trottle = false;
self.breake = false;
self.left = false;
self.right = false;
self.chassisShape = new CANNON.Box(new CANNON.Vec3(2, 1,0.5));
self.chassisBody = new CANNON.Body({ mass: 150 });
self.chassisBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2)
self.chassisBody.addShape(self.chassisShape);
			var s =1.5
			var shape = new CANNON.Box(new CANNON.Vec3(0.5*s,0.5*s,0.5*s));
          //self.chassisBody.addShape(shape, new CANNON.Vec3( s, 0,-17));
self.chassisBody.position.set(50, 202, -601);
self.testpos={}
			//socketlist[socket.id].testpos.x=socketlist[socket.id].chassisBody.position.x
			//socketlist[socket.id].testpos.y=socketlist[socket.id].chassisBody.position.y
			//socketlist[socket.id].testpos.z=socketlist[socket.id].chassisBody.position.z
self.chassisBody.angularVelocity.set(0, 0, 0.5);
            //demo.addVisual(chassisBody);

            var options = {
                radius: 0.5,
                directionLocal: new CANNON.Vec3(0, 0, -1),
                suspensionStiffness: 30,
                suspensionRestLength: 0.3,
                frictionSlip: 5,
                dampingRelaxation: 2.3,
                dampingCompression: 4.4,
                maxSuspensionForce: 100000,
                rollInfluence:  0.01,
                axleLocal: new CANNON.Vec3(0, 1, 0),
                chassisConnectionPointLocal: new CANNON.Vec3(1, 1, 0),
                maxSuspensionTravel: 0.3,
                customSlidingRotationalSpeed: -30,
                useCustomSlidingRotationalSpeed: true
            };

            // Create the vehicle
self.vehicle = new CANNON.RaycastVehicle({
                chassisBody: self.chassisBody,
            });

            options.chassisConnectionPointLocal.set(1, 1, 0);
            self.vehicle.addWheel(options);

            options.chassisConnectionPointLocal.set(1, -1, 0);
            self.vehicle.addWheel(options);

            options.chassisConnectionPointLocal.set(-1, 1, 0);
            self.vehicle.addWheel(options);

            options.chassisConnectionPointLocal.set(-1, -1, 0);
            self.vehicle.addWheel(options);

            self.vehicle.addToWorld(world);

            var wheelBodies = [];
            for(var i=0; i<self.vehicle.wheelInfos.length; i++){
                var wheel = self.vehicle.wheelInfos[i];
                var cylinderShape = new CANNON.Cylinder(wheel.radius, wheel.radius, wheel.radius / 2, 20);
                var wheelBody = new CANNON.Body({
                    mass: 0
                });
                wheelBody.type = CANNON.Body.KINEMATIC;
                wheelBody.collisionFilterGroup = 0; // turn off collisions
                var q = new CANNON.Quaternion();
                q.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), Math.PI / 2);
                wheelBody.addShape(cylinderShape, new CANNON.Vec3(), q);
                wheelBodies.push(wheelBody);
                //demo.addVisual(wheelBody);
                world.addBody(wheelBody);
            }

            // Update wheels
            world.addEventListener('postStep', function(){
                for (var i = 0; i < self.vehicle.wheelInfos.length; i++) {
                    self.vehicle.updateWheelTransform(i);
                    var t = self.vehicle.wheelInfos[i].worldTransform;
                    var wheelBody = wheelBodies[i];
                    wheelBody.position.copy(t.position);
                    wheelBody.quaternion.copy(t.quaternion);
                }
            });
playerlist[socket.id] = self;
initpack.player.push({
name:self.name,
x:self.chassisBody.position,
y:self.chassisBody.quaternion,
angle:self.angle,
body:self.body,
engine:self.engine,
wheels:self.wheels,
//speed:self.speed,
})

var allplayers = [];
for(var i in playerlist)
allplayers.push({
name:playerlist[i].name,
x:playerlist[i].chassisBody.position,
y:playerlist[i].chassisBody.quaternion,
angle:playerlist[i].angle,
body:playerlist[i].body,
engine:playerlist[i].engine,
wheels:playerlist[i].wheels,
//speed:playerlist[pl].speed,
})

socket.emit('neaw',{
player:allplayers,

})
socket.emit('itsim',socket.id)

//console.log(playerlist)
//console.log(socketlist)
}
else if(somp.status === false){
if(playerlist[socket.id]){
	delete playerlist[socket.id]
	deletepack.player.push(socket.id)
	//save progress
	}
}
}else{
socket.emit('signin',{status:false,login:'error'});
}
// })
})
socket.on('output',function(somp){
if(somp.button === 'trottle')
self.trottle = somp.status
if(somp.button === 'break')
self.breake = somp.status
if(somp.button === 'left')
self.left = somp.status
if(somp.button === 'right')
self.right = somp.status
console.log(somp)
})

	socket.on('disconnect', function() {
	delete socketlist[socket.id];
	if(playerlist[socket.id]){
	delete playerlist[socket.id]
	deletepack.player.push(socket.id)
	//save progress
	}
	console.log('Подключение было потеряно');
	console.log(socketlist)
	})
	socket.on('sendmesg',function(somp2){
	var playerName = socket.id;
	
	  for(var ka in socketlist){
	  
	  socketlist[ka].emit('addToChat',{playerName,somp2});
	  
	  }
	  })
});
var world = new CANNON.World() 
world.broadphase = new CANNON.SAPBroadphase(world);
world.gravity.set(0, -9.8, 0) 
world.defaultContactMaterial.friction = 0;


var grid=
[
//[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],
[0,0,1,1,1,1,2,2,2,2,3,3,4,5,5,6,7,7,7,7,7,7,7,7,7,7,7,8,8,9,10,10,11,11,11,11,12,12,12,12,12,12,12,13,14,15,16,16,16,16,16,16,16,16,16,16,16,16,16,17,20,22,23,25,25,25,26,27,27,27,28,28,28,28,28,28,28,28,28,28,32,34,36,37,55,60,65,68,72,74,75,76,76,76,77,77,77,77,77,77,77,77,77,79,88,92,99,100,120,130,134,135,140,145,150,155,160,165,170,175,175,185,190,195,200,203,208,210,212,214,215,216,217,218,219,220,221,221,221,221,222,222,222,222,222,222,222,222,222,222],

]

            var hfShape = new CANNON.Heightfield(grid, {
                elementSize: 5
            });
            var hfBody = new CANNON.Body({ mass: 0 });
            hfBody.addShape(hfShape);
            hfBody.position.set(-65,-21.4, 130);
			hfBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1,0,0), Math.PI/2); 
            world.addBody(hfBody);

setInterval(function(){
var pck = {
player:[],

};
for(var pl in playerlist){//для всех игроков в плеер листе
//на будующее - эти все расчеты - это конечно хорошо, но в конечном итоге, подобные расчеты лучше проводить только один раз, грубо говоря - при выезде из гаража, что то вроде подсчета массы, подсчета мошности двигателя, подсчета коефицента,  а во время игры уже работать с этими заготовками.
var wheel = playerlist[pl].anglewheel/25//расчеты изменения инерции, при повороте колёс
if(wheel < 0)// проверка нужна, из за того, что playerlist[pl].anglewheel может уходить в минусовую сторону, и когда значение меньше нуля
wheel = -wheel//то мы просто убираем минус из значения, чтобы работать только с положительным коеффицентом, так как для расчёта изменения инерции нет разницы повернули мы в право или в лево, а вот для расчета направления разница есть.
if(playerlist[pl].trottle === true){//если игрок нажимает кнопку вперёд
//if(playerlist[pl].speed >= 0)//если скорость больше или равна нулю, то есть либо стоит на месте либо едет вперёд
// //playerlist[pl].speed +=playerlist[pl].nj / (playerlist[pl].mass/3)//прибавляет скорость игроку, в соответствии с возможностями двигателя делённая на массу авто
//playerlist[pl].speed +=playerlist[pl].nj / (playerlist[pl].mass/3) - playerlist[pl].speed/(playerlist[pl].nj*10) - wheel //playerlist[pl].nj набор скорости авто, связанного с мощностью двигателя, (playerlist[pl].mass/3) замедление набора скорости связанной с массой авто, - playerlist[pl].speed уменьшение разгона авто при наборе скорости (playerlist[pl].nj*10) связанного с мощьностью двигателя, - wheel торможение при изменение траиктории движение
//else//если игрок едет назад и одновреммено с этим нажимает кнопку вперёд
//playerlist[pl].speed +=playerlist[pl].breaking / playerlist[pl].mass*1000// при отрицательной скорости прибавляет положительную скорость, в соответствии с возможностями тормозов деленной на массу машины
playerlist[pl].vehicle.applyEngineForce( -1000, 2);
playerlist[pl].vehicle.applyEngineForce( -1000, 3);

//if(playerlist[pl].speed = playerlist[pl].thismatic/playerlist[pl].matic)

if(playerlist[pl].speed > playerlist[pl].maxspeed)//если игрок достиг максимальной скорости, допустимой шинами игрока
playerlist[pl].speed = playerlist[pl].maxspeed//устанавливается максимальная скорость, допустимая шинами игрока
if(playerlist[pl].speed > playerlist[pl].maxspeed_wheel)//то же самое что и с максималкой двигателя, но для колёс, если один из этих скриптов выполнится, то скорость ограничется именно им, другими словами, максималка устанавливается только одна, либо двигателя либо колёс, наименьшая из них и будет максималкой для автомобиля.
playerlist[pl].speed = playerlist[pl].maxspeed_wheel
}
else if(playerlist[pl].breake === true){//всё то же самое что и с кнопкой вперёд
//if(playerlist[pl].speed <= 0)
//playerlist[pl].speed -=playerlist[pl].nj / (playerlist[pl].mass/3) + playerlist[pl].speed/(playerlist[pl].nj*10) - wheel//газ
//else
//playerlist[pl].speed -=playerlist[pl].breaking / playerlist[pl].mass*1000//тормоз
playerlist[pl].vehicle.applyEngineForce( 1000, 2);
playerlist[pl].vehicle.applyEngineForce( 1000, 3);
if(playerlist[pl].speed < -playerlist[pl].maxspeed/5)
playerlist[pl].speed = -playerlist[pl].maxspeed/5//максималка назад в пять раз меньше максималки вперёд
//думаю здесь безсмысленно добавлять максималку колёс, уш больно маленькие значения оперируются, а вот отсутствие лишнего скрипта повлияет на оптимизацию
}else{//если игрок не нажимает ни кнопку назад, ни кнопку в перёд, то на машину начинает воздействовать сопротивление воздуха, и трение шин, игрок начинает замедлятся
//if(playerlist[pl].speed > 0.01)//если скорость игрока больше нуля, или же игрок едет вперёд.
//playerlist[pl].speed -=(0.01 + wheel)//скорость игрока начинает незначительно уменьшатся + влияние поворота колёс
//else if(playerlist[pl].speed < -0.01)//если скорость игрока меньше нуля, или же игрок едет назад.
//playerlist[pl].speed +=(0.01 + wheel)//отрицательная скорость игрока начинает незначительно уменьшатся + влияние поворота колёс
//else//если скорость игрока близка к нулю (как раз из за этого и писался не ноль, а > 0.01 и < -0.01 в скриптах выше)
//playerlist[pl].speed =0//скорость игрока становится равна нулю, или же игрок польностью останавливается
playerlist[pl].vehicle.applyEngineForce( 0, 2);
playerlist[pl].vehicle.applyEngineForce( 0, 3);
}
if(playerlist[pl].left === true){
playerlist[pl].anglewheel-=0.1

if(playerlist[pl].anglewheel < -1)
playerlist[pl].anglewheel = -1
}
else if(playerlist[pl].right === true){
playerlist[pl].anglewheel+=0.1

if(playerlist[pl].anglewheel > 1)
playerlist[pl].anglewheel = 1
}else{
if(playerlist[pl].anglewheel > 0.01)
playerlist[pl].anglewheel -= 0.01

else if(playerlist[pl].anglewheel < -0.01)
playerlist[pl].anglewheel += 0.01
else
playerlist[pl].anglewheel = 0
}
if(playerlist[pl].speed === 0){

}
else if(playerlist[pl].speed < 1.8 && playerlist[pl].speed > -1.8)
playerlist[pl].angle += playerlist[pl].anglewheel*(playerlist[pl].speed/2)
else{//в строке выше всё работает замечательно, так как там производится умножение, как на плюсовой диапазон поворота руля, так и на минусовой, ниже деление нету, поэтому нужно проверять вперёд машина едет или на зад, и относительно этого, поворачивать авто
if(playerlist[pl].speed > 0)
playerlist[pl].angle += playerlist[pl].anglewheel
else
playerlist[pl].angle -= playerlist[pl].anglewheel
}
playerlist[pl].vehicle.setSteeringValue( -playerlist[pl].anglewheel/2, 0);
playerlist[pl].vehicle.setSteeringValue( -playerlist[pl].anglewheel/2, 1);
if(playerlist[pl].speed > 0)//если авто едет вперёд
playerlist[pl].thismatic = Math.round(playerlist[pl].speed / playerlist[pl].onematic)+1// текущяя передача вычесляется из текущей скорости делённой на длинну одной передачи, длина одной передачи вычесляется путём диления максималки на кол во передач
else if(playerlist[pl].speed < 0)// если авто едет назад
playerlist[pl].thismatic =-1// то у него включается задняя (минусовая) передача
else//если авто никуда не едет
playerlist[pl].thismatic =0// то он стоит на нейтралки (нулевая передача)

playerlist[pl].timermatic --
if(playerlist[pl].prethismatic < playerlist[pl].thismatic && playerlist[pl].timermatic < 0 ){
playerlist[pl].timermatic = 60
if(playerlist[pl].speed >0){
if(playerlist[pl].speed >1){
playerlist[pl].speed -=(playerlist[pl].nj / (playerlist[pl].mass/3) + playerlist[pl].speed/(playerlist[pl].nj*10) - wheel)*10//импульс назад при переключении

}
for(var key in socketlist){
socketlist[key].emit('matic',{thismatic:playerlist[pl].thismatic,name:playerlist[pl].name})
}
console.log('emit',playerlist[pl].thismatic)
}
}
if(playerlist[pl].prethismatic > playerlist[pl].thismatic && playerlist[pl].timermatic < 0 ){
for(var key in socketlist){
socketlist[key].emit('matic-',{thismatic:playerlist[pl].thismatic,name:playerlist[pl].name})
}
console.log('emit-',playerlist[pl].thismatic)
}

//if(playerlist[pl].timermatic < 57)//если пару кадров назад произошло переключение передач
//playerlist[pl].speed -=(playerlist[pl].nj / (playerlist[pl].mass/3) + playerlist[pl].speed/(playerlist[pl].nj*10) - wheel)*3//импульс назад при переключении
//playerlist[pl].timematic//время необрасчания внимания на пердачу (грубо говоря в момент переключения передачи (допустим со 2 передачи на 3 передачу) у авто падает скорость, и когда мы переключаемся, допустим на скорости 18, на 3 передачу, у нас теряется скорость, допустим на 17, и когда мы её опять начнём набирать, то она опять подойдет к 18, то она опять проподёт, так вот, чтобы такое не произошло, нужно поставить этот таймер, где то на 3 секунды
//замедление, при переключении передачи, нужно серьёзно сбрасывать скорость, можно конечно просто написать -1, но лучше что бы у нас был коефицент польностью повёрнутого колеса для торможения, где то на пол секунды
//playerlist[pl].timematic//время выдавливания сцепления и переключения передачи, должно быть меньше значения сверху
playerlist[pl].prethismatic = playerlist[pl].thismatic
//console.log(playerlist[pl].thismatic, playerlist[pl].speed)

playerlist[pl].x1 += Math.cos(playerlist[pl].angle/180*Math.PI)*playerlist[pl].speed;
playerlist[pl].y1 += Math.sin(playerlist[pl].angle/180*Math.PI)*playerlist[pl].speed;

playerlist[pl].x = playerlist[pl].x1 + Math.cos(playerlist[pl].angle/180*Math.PI)*70;//здесь теперь указывается смещение центра машины, с задней полуоси, к центру машины
playerlist[pl].y = playerlist[pl].y1 + Math.sin(playerlist[pl].angle/180*Math.PI)*70;//100

if(playerlist[pl].proverkanastolknovenie === 0){
for(var pl2 in playerlist){
if(playerlist[pl].name !== playerlist[pl2].name){
playerlist[pl2].proverkanastolknovenie = 1
var distansion = popadanie(playerlist[pl],playerlist[pl2])
if(distansion < 75){
/*
if(playerlist[pl].angle > playerlist[pl2].angle){
playerlist[pl].angle -= ((playerlist[pl].angle%360) - (playerlist[pl2].angle%360)) / 2
//playerlist[pl2].angle += ((playerlist[pl].angle%360) - (playerlist[pl2].angle%360)) / 2
playerlist[pl2].angle = playerlist[pl].angle
}else{
playerlist[pl].angle += ((playerlist[pl2].angle%360) - (playerlist[pl].angle%360)) / 2
//playerlist[pl2].angle -= ((playerlist[pl2].angle%360) - (playerlist[pl].angle%360)) / 2
playerlist[pl2].angle = playerlist[pl].angle
}
*/
var aangle = playerlist[pl].angle//перед тем, как изменить значение угла первой машины, запоменаем его
playerlist[pl].angle = (playerlist[pl].angle%360)/2 + (playerlist[pl2].angle%360)/2
playerlist[pl2].angle = (playerlist[pl].angle%360)/2 + (playerlist[pl2].angle%360)/2
//playerlist[pl2].angle = playerlist[pl].angle
}
//playerlist[pl].x3 = playerlist[pl].x + Math.cos((playerlist[pl].angle+90)/180*Math.PI)*45;//здесь теперь указывается правый край машины, для расчёта столкновения
//playerlist[pl].y3 = playerlist[pl].y + Math.sin((playerlist[pl].angle+90)/180*Math.PI)*45;
}
}
}
}
world.step(1 / 60)	
for(var pl in playerlist){
playerlist[pl].proverkanastolknovenie = 0;//си ё действо, после выполнения фор вара выше (331 строка), обнуляет для всех игроков статус проверки на столкновениие. Это оптемезирует проверку столкновение в 2 раза, так как без этой проверки, код проверял столкновение А с Б и потом Б с А, а в этом случае у Б уже будет статус 1 (проверенно) и проверки столкновения Б с А выполнятся небудет.
pck.player.push({//для каждого игрока, в списке игроков, добавляем к массиву pck следующие параметры:
x:playerlist[pl].chassisBody.position,
y:playerlist[pl].chassisBody.quaternion,
//x3:playerlist[pl].x3,
//y3:playerlist[pl].y3,
angle:playerlist[pl].angle,
anglewheel:playerlist[pl].anglewheel,
speed:playerlist[pl].speed,
name:playerlist[pl].name,
})//это нужно для того, чтобы не отправлять все подряд, а только лиш нужные вещи
}

for(var key in socketlist){
socketlist[key].emit('upd',pck);
//if(initpack.player.length > 0 || initpack.bullet.length > 0)
if(initpack.player.length > 0)
socketlist[key].emit('neaw',initpack);
if(deletepack.player.length > 0){
if(socketlist[key])//выловил, проверяй! Думаю у орсюхи этой проблеммы небыло, так как у меня нарушена последовательность, нужно было сначала удалить сокет из сокет листа, а уже затем рассылать информацию, для других соккетов, об отключении этого сокета
socketlist[key].emit('delet',deletepack);//тут крит ошибка, нужно выловить!
}
}


initpack.player=[];

deletepack.player=[];


//console.log(playerlist)
},33)

minusfive("asd")